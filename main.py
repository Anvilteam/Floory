import disnake
import random
import os
import yaml
import core
import core.views
import sys
from disnake.ext import commands, tasks
from typing import List
from core.database import redis_client, cur
from core.exceptions import *
from core.tools import LangTool, color_codes
from progress.bar import Bar
from loguru import logger

test_guilds = [737351356079145002,  # FallenSky
               906795717643882496  # FlooryHome
               ]
categories = ['moderation', 'utils', 'guild_config', 'fun']


async def autocomplete_categories(inter, string: str) -> List[str]:
    return [category for category in categories if string.lower() in category.lower()]


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.add(sys.stderr, format="{time} {level} {message}", filter="my_module", level="INFO",
           enqueue=True,
           backtrace=True,
           diagnose=True)
logger.add("logs/floory_{time}.log", enqueue=True)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –∫–ª–∏–µ–Ω—Ç–∞
cfg = yaml.safe_load(open('config.yaml', 'r', encoding="UTF-8"))
client = commands.Bot(command_prefix=cfg["bot"]["prefix"], intents=disnake.Intents.all())
# test_guilds=test_guilds,
# sync_commands_debug=True,
# sync_permissions=True)
logger.info("–ó–∞–ø—É—Å–∫ disnake..")


async def load_cache():
    with Bar('–ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞', max=len(client.guilds)) as bar:
        for guild in client.guilds:
            locale = await cur("fetch", f"SELECT `locale` FROM `guilds` WHERE `guild` = {guild.id}")
            redis_client.set(guild.id, locale)
            bar.next()


@client.event
async def on_ready():
    logger.info("–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–≥–æ–≤")
    for filename in os.listdir('./cogs'):
        if filename.endswith('.py'):
            client.load_extension(f'cogs.{filename[:-3]}')
            logger.info(f"–ö–æ–≥ {filename} –∑–∞–≥—Ä—É–∂–µ–Ω")
    logger.info("–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞")
    await core.database.connect()
    await load_cache()
    await change_status.start()
    logger.info("–ë–æ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω!")


@client.event
async def on_guild_join(guild: disnake.Guild):
    await cur("query", f"INSERT INTO guilds (guild) VALUES({guild.id});")
    logger.info(f"–ù–æ–≤–∞—è –≥–∏–ª—å–¥–∏—è! {guild.name}-{guild.id}")
    channel = guild.system_channel
    locale = LangTool(guild.id)
    await locale.set()

    embed = disnake.Embed(title=locale["main.inviting_title"],
                          description=locale["main.inviting_description"],
                          color=color_codes['default'])
    embed.add_field(name=locale["main.faq1Q"], value=locale["main.faq1A"])
    embed.add_field(name=locale["main.faq2Q"], value=locale["main.faq2A"], inline=False)
    embed.add_field(name=locale["main.faq3Q"], value=locale["main.faq3A"], inline=False)
    if channel is not None:
        await channel.send(embed=embed, view=core.views.SupportServer())


@client.event
async def on_guild_remove(guild: disnake.Guild):
    await cur("query", f"DELETE FROM `guilds` WHERE `guild` = {guild.id};")
    logger.info(f"–ë–æ—Ç –ø–æ–∫–∏–¥–∞–µ—Ç –≥–∏–ª—å–¥–∏—é {guild.name}-{guild.id}")


@client.event
async def on_slash_command_error(inter: disnake.ApplicationCommandInteraction, error):
    locale = LangTool(inter.guild.id)
    await locale.set()
    formatted = f"{error}|{error.__traceback__}"
    embed = disnake.Embed(title=locale["main.error"],
                          color=color_codes["error"])
    if isinstance(error, commands.CommandOnCooldown):
        embed.add_field(name=f"```CommandOnCooldown```",
                        value=locale["exceptions.CommandOnCooldown"].format(
                            time=f'{error.retry_after:.2f}{locale["main.second"]}'))

    elif isinstance(error, NotEnoughPerms):
        permissions = error.permissions
        embed_value = ''
        for perm in permissions:
            string = f"‚ùå {locale[f'permissions.{perm}']}\n"
            embed_value += string
        embed.add_field(name=f"```NotEnoughPerms```",
                        value=locale["exceptions.NotEnoughPerms"])
        embed.add_field(name="> –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞", value=embed_value)

    elif isinstance(error, MemberHigherPermissions):
        embed.add_field(name=f"```MemberHigherPermissions```",
                        value=locale["exceptions.MemberHigherPermissions"])
    elif isinstance(error, disnake.Forbidden):
        embed.add_field(name=f"```Forbidden```",
                        value=locale["exceptions.Forbidden"])
    else:
        logger.error("-----------------–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞!----------------")
        logger.error(formatted)
        logger.error(f"–ì–∏–ª—å–¥–∏—è {inter.guild}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inter.author}")
        logger.error("----------------------------------------------------")

    embed.set_thumbnail(file=disnake.File("logo.png"))
    embed.set_footer(text=locale["exceptions.unknown"])
    await inter.send(embed=embed, view=core.views.SupportServer())


@client.event
async def on_button_click(inter: disnake.MessageInteraction):
    locale = LangTool(inter.guild.id)
    await locale.set()
    match inter.component.custom_id.split('-')[0]:
        case 'voting':
            msg = inter.message
            embed = msg.embeds[0]
            fields = embed.fields
            button: disnake.ui.Button = inter.component
            # –†–∞–∑–¥–µ–ª—è–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏ –∫–æ–ª-–≤–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏—Ö
            label, counter = button.label.split('|')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ —é–∑–µ—Ä –∏–ª–∏ –Ω–µ—Ç
            votes = ''
            variants = []
            for f in fields:
                variants.append(f.name)
                votes += f.value

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏
            chosen_index = variants.index(label)
            field = fields[chosen_index]

            logger.info(label)
            if inter.author.mention not in votes:
                # –ü—Ä–∏–±–∞–≤–ª—è–µ–º 1 –∫ —Å—á–µ—Ç—á–∏–∫—É –Ω–∞ –∫–Ω–æ–ø–∫–µ
                button.label = label + f'|{int(counter) + 1}'
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
                button_list = msg.components[0].children
                button_list[chosen_index] = button
                new_btn_list = []
                for btn in button_list:
                    new_btn_list.append(disnake.ui.Button.from_component(btn))
                embed.set_field_at(chosen_index, name=field.name, value=field.value + f'\n{inter.author.mention}')
                await inter.response.edit_message(embed=embed, components=new_btn_list)
            else:
                await inter.send(locale["utils.alreadyVoted"], ephemeral=True)
        case 'close_vote':
            if inter.author.guild_permissions.manage_messages:
                locale = LangTool(inter.guild.id)
                await locale.set()
                msg = inter.message
                embed = msg.embeds[0]
                fields = embed.fields
                fields_names = [f.name for f in fields]
                button_list = msg.components[0].children
                btns_counter = [button.label.split('|')[1] for button in button_list if
                                button.style != disnake.ButtonStyle.red]
                for i in range(len(fields_names)):
                    embed.set_field_at(i, name=fields_names[i], value=btns_counter[i])
                await inter.response.edit_message(content=locale['utils.votingEnd'], embed=embed, components=[])
            else:
                await inter.send(locale["utils.nep"], ephemeral=True)


@tasks.loop(seconds=300.0)
async def change_status():
    """–ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å"""
    current_status = random.choice(cfg["bot"]["splashes"])
    await client.change_presence(activity=disnake.Game(name=current_status, type=disnake.ActivityType.watching))


@commands.cooldown(1, 180, commands.BucketType.member)
@client.slash_command(description="—Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞")
async def status(inter: disnake.ApplicationCommandInteraction):
    splash = random.choice(cfg["bot"]["status_splashes"])
    locale = LangTool(inter.guild.id)
    await locale.set()
    latency = client.latency
    guilds = len(client.guilds)
    cmds = len(client.slash_commands)
    users = len(client.users)
    embed = disnake.Embed(title="FlooryBot",
                          description=f"```{latency * 1000:.0f} ms | {splash}```",
                          color=color_codes['default'])
    embed.add_field(name="üõ° " + locale["main.guilds"], value=f"```{guilds}```")
    embed.add_field(name="‚öô " + locale["main.cmds"], value=f"```{cmds}```", inline=False)
    embed.add_field(name="üë• " + locale["main.users"], value=f"```{users}```")
    embed.add_field(name="üíª " + locale["main.owners"], value=f"```Xemay#9586\nRedWolf#2007\nD3st0nŒª#5637```",
                    inline=False)
    embed.add_field(name="<:github:945683293666439198> Github", value="[–¢—ã–∫](https://github.com/Anvilteam/Floory)")
    embed.add_field(name="üé≤ Version", value="```0.3 beta```", inline=False)
    embed.set_thumbnail(file=disnake.File("logo.png"))
    await inter.send(embed=embed, view=core.views.SupportServer())


@commands.cooldown(1, 600, commands.BucketType.member)
@client.slash_command(description="–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é –¥–ª—è –±–æ—Ç–∞")
async def idea(inter: disnake.ApplicationCommandInteraction,
               title: str = commands.Param(description="–ù–∞–∑–≤–∞–Ω–∏–µ –∏–¥–µ–∏"),
               description: str = commands.Param(description="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–¥–µ–∏")):
    channel = client.get_channel(944878540741025813)
    embed = disnake.Embed(title=title)
    embed.add_field(name="–û–ø–∏—Å–∞–Ω–∏–µ", value=description)
    embed.add_field(name="–ü–æ–¥–¥–µ—Ä–∂–∞–ª–∏", value=f"{inter.author.mention}")
    embed.set_author(name=inter.author, icon_url=inter.author.display_avatar.url)
    view = core.views.Idea()
    msg = await channel.send(embed=embed, view=view)
    await msg.create_thread(name=title)
    await inter.send("–í–∞—à–∞ –∏–¥–µ—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∞")


@commands.cooldown(1, 600, commands.BucketType.member)
@client.slash_command(description="—Å–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ/–æ—à–∏–±–∫–µ –≤ –±–æ—Ç–µ")
async def bug(inter: disnake.ApplicationCommandInteraction,
              bug_name: str = commands.Param(description="–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–≥–∞"),
              bug_description: str = commands.Param(description="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–∞–≥–∞")):
    channel = client.get_channel(944979832092114997)
    embed = disnake.Embed(title="–ë–∞–≥ " + bug_name)
    embed.add_field(name="–û–ø–∏—Å–∞–Ω–∏–µ", value=bug_description)
    embed.set_author(name=inter.author, icon_url=inter.author.display_avatar.url)
    msg = await channel.send(embed=embed, view=core.views.CloseBugTicket())
    await msg.create_thread(name=bug_name)
    await inter.send("–ë–∞–≥ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω", ephemeral=True)


@client.slash_command(description="—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞")
async def help(inter: disnake.ApplicationCommandInteraction):
    embed = disnake.Embed(title="üìó Help",
                          description="–ó–¥–µ—Å—å –ø—Ä–∏–≤–µ–¥–µ–Ω–∞ `—Å–∞–º–∞—è –≥–ª–∞–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è` –æ —Å–∏—Å—Ç–µ–º–µ –∫–æ–º–∞–Ω–¥\n"
                                      "\n"
                                      "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á—Ç–æ –Ω–∞–¥–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ —É –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥ –µ—Å—Ç—å —Å–≤–æ–π –ø—Ä–µ—Ñ–∏–∫—Å"
                                      " –±–µ–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É, *–µ–≥–æ –Ω–∞–¥–æ –ø—Ä–æ–ø–∏—Å—ã–≤–∞—Ç—å "
                                      "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.*\n"
                                      "\n"
                                      "–ó–¥–µ—Å—å –±—É–¥—É—Ç –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—Å–∞–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∏—Ö –ø—Ä–µ—Ñ–∏–∫—Å—ã —Ç.–∫. –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∞–º–∏—Ö –∫–æ–º–∞–Ω–¥ "
                                      "–í—ã —É–≤–∏–¥–µ—Ç–µ –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –∏—Ö –ø–∏—Å–∞—Ç—å.",
                          color=color_codes['default'])
    embed.add_field(name="üõ° –ú–æ–¥–µ—Ä–∞—Ü–∏—è",
                    value="> –û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏, –Ω–µ –±–æ–ª–µ–µ\n–ü—Ä–µ—Ñ–∏–∫—Å - `moderation`")
    embed.add_field(name="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                    value="> –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n–ü—Ä–µ—Ñ–∏–∫—Å - `settings`",
                    inline=False)
    embed.add_field(name="üîé –£—Ç–∏–ª–∏—Ç—ã",
                    value="> –†–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–ª–µ–∑–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã\n–ü—Ä–µ—Ñ–∏–∫—Å - `utils`",
                    inline=False)
    embed.add_field(name="üéÆ –í–µ—Å–µ–ª–æ—Å—Ç–∏",
                    value="> –†–∞–∑–ª–∏—á–Ω—ã–µ –º–∏–Ω–∏-–∏–≥—Ä—ã –∏ –¥—Ä—É–≥–∏–µ —à—Ç—É—á–∫–∏\n–ü—Ä–µ—Ñ–∏–∫—Å - `fun`",
                    inline=False)
    await inter.send(embed=embed)


@commands.cooldown(1, 45, commands.BucketType.member)
@client.slash_command(description="–ø–∏–Ω–≥ –±–æ—Ç–∞")
async def ping(inter: disnake.ApplicationCommandInteraction):
    latency = client.latency
    await inter.response.send_message(f'Pong! {latency * 1000:.0f} ms')


client.run(cfg["bot"]["token"])
